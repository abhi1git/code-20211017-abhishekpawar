Description: This template creates a Lambda & an IAM Role for Lambda. 
Parameters:
  QueueARN:
   Description: ARN of the queue
   Type: String
  IAMRoleName:
    Description: Enter Lambda IAM Role Name
    Type: String
  LambdaFunctionName:
    Description: Enter Lambda Name
    Type: String
  BucketName:
    Type: String
    Description: Bucket Name to store message files
Resources:
#Creates an IAM role for Lambda function.
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref IAMRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: cfttask-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Tags:
        -
          Key: "Name"
          Value: !Ref IAMRoleName
        -
          Key: "Application Name"
          Value: CFTtask

  SQSPutMessageS3Lambda:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaIAMRole
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time
          def lambda_handler(event, context):
              result_string = ""
              epochtime = int(time.time())
              for record in event.get("Records",[]):
                body = record.get("body",{})
                string_body = json.dumps(body)
                result_string = result_string + string_body + "\n"
              encoded_string = result_string.encode("utf-8")
              bucket_name = os.environ["BUCKET_NAME"]
              file_name = "message-body.txt"
              s3_path = str(epochtime)+"/"+ file_name
              s3 = boto3.resource("s3")
              s3.Bucket(bucket_name).put_object(Key=s3_path, Body=encoded_string)
              print("Message file pushed to S3")          
      Description: Receive important messages from SQS & put in to S3
      FunctionName: !Ref LambdaFunctionName
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName      
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.7
      Timeout: 20      
  
  LambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !Ref QueueARN
      FunctionName: !Ref SQSPutMessageS3Lambda

#Creates Log Group for the Lambda Function to push logs.
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'
      RetentionInDays: 90

Outputs:
  IAMRoleArn:
    Description: IAM Role Arn
    Value: !GetAtt LambdaIAMRole.Arn